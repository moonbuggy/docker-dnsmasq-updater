# shellcheck shell=bash disable=SC2034
DMU_VERSION="2.0.3"

DEFAULT_PYTHON_VERSION='3.11'
SSL_LIBRARY='openssl'
# SSL_LIBRARY='libressl'

# WHEEL_REPO="moonbuggy2000/python-musl-wheels"
WHEEL_REPO='moonbuggy2000/python-alpine-wheels'

# these should be available from PyPi now
#PYTHON_WHEELS="paramiko-${SSL_LIBRARY} python-hosts"

# but keep paramiko so we can choose the SSL library, but also because it will
# include the pre-built cryptography wheel (which isn't available from PyPi)
PYTHON_WHEELS="bottlejwt paramiko-${SSL_LIBRARY}"

# Alpine has no cargo or rust packages for s390x, which means no LibreSSL
#EXCLUDED_ARCHES='s390x'

# use buildx to make the multi-arch images
BUILD_MULTIARCH='true'

declare -A BUILD_ARGS=( \
	[BUILD_PYTHON_VERSION]='Python version' \
	[SSL_LIBRARY]='SSL library' \
	[IMPORTS_DIR]='Imports dir' \
	[AGENT_STRING]='agent string' \
	[API_BACKEND]='API backend' \
	[PYPI_INDEX]='PyPi index' \
	[APK_PROXY]='APK proxy' \
)

declare -A CHECKOUT_DISPLAY=( \
	[BUILD_PYTHON_VERSION]='Python version' \
	[DOCKER_FILE]='Dockerfile' \
	[SSL_LIBRARY]='SSL library' \
	[DMU_VERSION]='DMU version' \
	[DMU_LATEST]='DMU repo latest' \
	[is_latest]='Building latest' \
	[AGENT_STRING]='agent string' \
	[PYPI_INDEX]='PyPi index' \
)

env_end () {
	TARGET_TAG='script'
	SOURCE_REPO='moonbuggy2000/alpine-s6-python'
	ARCH_YAML='hooks/arch.alpine.yaml'
	API_BACKEND='gunicorn'
	unset AGENT_STRING
	BUILD_TARGET_STAGE='standalone'

	case "${DOCKER_TAG}" in
		agent*)
			TARGET_TAG='agent'
			unset PYTHON_WHEELS
			AGENT_STRING='_agent'
			unset API_BACKEND
			;;&
		*server*)
			BUILD_TARGET_STAGE='dnsmasq'
			TARGET_TAG='server'
			;;&
		*binary*)
			TARGET_TAG="${TARGET_TAG}-binary"
			SOURCE_REPO='moonbuggy2000/alpine-s6'
			DOCKER_FILE='Dockerfile.binary'
			;;
	esac

	TARGET_TAG="${DMU_VERSION}-${TARGET_TAG}"
}

post_checkout_start () {
	add_param "${PYTHON_VERSION:-${DEFAULT_PYTHON_VERSION}}" 'BUILD_PYTHON_VERSION'

	case "${TARGET_TAG}" in
		*binary) SOURCE_TAG='latest' ;;
		*) SOURCE_TAG="${BUILD_PYTHON_VERSION}" ;;
	esac

	add_param "$(docker_api_latest ${DOCKER_REPO})" 'DMU_LATEST'

	# we'll add extra tags if we're building the latest version
	unset is_latest

	# assume version strings with alphabetical characters in them are beta/dev
	# build. i.e. let us use '1.1-dev' and such for test builds without pushing
	# a new 'script', 'agent', 'server' or 'latest' tag to Docker Hub.
	[ "${DMU_VERSION//[[:alpha:]]/}" = "${DMU_VERSION}" ] \
		&& [ "$(printf '%s\n%s\n' "${DMU_LATEST}" "${DMU_VERSION}" | sort -V | tail -n1)" = "${DMU_VERSION}" ] \
		&& is_latest='true'
}

# strip the version from the target tag if this is the latest version
# get_base_tags () {
# 	[ ! -z ${is_latest+set} ] && echo "${TARGET_TAG#*-}"
# }

## extra tags to add during post_push
get_manifest_tags () {
	local extra_tags && extra_tags=()

	case "${TARGET_TAG}" in
		*script)
			extra_tags+=("${DMU_VERSION}-script" "${DMU_VERSION}")
			[ ! -z ${is_latest+set} ] && extra_tags+=('script' 'latest')
			;;
		*script-binary)
			extra_tags+=("${DMU_VERSION}-binary")
			[ ! -z ${is_latest+set} ] && extra_tags+=('binary')
			;;
		*agent)
			extra_tags+=("${DMU_VERSION}-agent")
			[ ! -z ${is_latest+set} ] && extra_tags+=('agent')
			;;
		*agent-binary)
			extra_tags+=("${DMU_VERSION}-agent-binary")
			[ ! -z ${is_latest+set} ] && extra_tags+=('agent-binary')
			;;
		*server)
			extra_tags+=("${DMU_VERSION}-server")
			[ ! -z ${is_latest+set} ] && extra_tags+=('server')
			;;
	esac

	echo "${extra_tags[@]}"
}
